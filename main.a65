; ------------------------------------------------------------
; Mad Pascal Compiler version 1.6.6 [2021/12/15] for 6502
; ------------------------------------------------------------

STACKWIDTH	= 16
CODEORIGIN	= $2000

TRUE		= 1
FALSE		= 0

; ------------------------------------------------------------

	org $80

zpage

.ifdef @vbxe_detect
fxptr	.ds 2						; VBXE pointer
.fi

.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
psptr	.ds 2						; PROGRAMSTACK Pointer
.fi

bp	.ds 2
bp2	.ds 2

eax	.ds 4						;8 bytes (aex + edx) -> divREAL
edx	.ds 4
ecx	.ds 4

TMP
ztmp
ztmp8	.ds 1
ztmp9	.ds 1
ztmp10	.ds 1
ztmp11	.ds 1

STACKORIGIN	.ds STACKWIDTH*4
zpend

; ------------------------------------------------------------

ax	= eax
al	= eax
ah	= eax+1

cx	= ecx
cl	= ecx
ch	= ecx+1

dx	= edx
dl	= edx
dh	= edx+1

	org eax

FP1MAN0	.ds 1
FP1MAN1	.ds 1
FP1MAN2	.ds 1
FP1MAN3	.ds 1

	org ztmp8

FP1SGN	.ds 1
FP1EXP	.ds 1

	org edx

FP2MAN0	.ds 1
FP2MAN1	.ds 1
FP2MAN2	.ds 1
FP2MAN3	.ds 1

	org ztmp10

FP2SGN	.ds 1
FP2EXP	.ds 1

	org ecx

FPMAN0	.ds 1
FPMAN1	.ds 1
FPMAN2	.ds 1
FPMAN3	.ds 1

	org bp2

FPSGN	.ds 1
FPEXP	.ds 1

	.ifdef MAIN.@DEFINES.BASICOFF
	org CODEORIGIN
	icl 'atari\basicoff.asm'
	ini CODEORIGIN
	.fi

	.ifdef MAIN.@DEFINES.S_VBXE
	opt h-
	ins 'atari\s_vbxe\sdxld2.obx'
	opt h+
	.fi

.local	RESOURCE
	icl 'atari\resource.asm'
	?EXTDETECT = 0
	?VBXDETECT = 0

	RCASM 'music/music.asm' SFX_API.SFX_ORG 0 0 0 0 0 0 0 0
.endl

; ------------------------------------------------------------

	org CODEORIGIN

	STATICDATA

; ------------------------------------------------------------

RTLIB
	icl 'rtl6502_a8.asm'

.print 'ZPAGE: ',zpage,'..',zpend-1

.print 'RTLIB: ',RTLIB,'..',*-1

; ------------------------------------------------------------

START
	tsx
	stx MAIN.@halt+1

	.ifdef fmulinit
	fmulinit
	.fi

VLEN	= VARDATASIZE-VARINITSIZE
VADR	= DATAORIGIN+VARINITSIZE

	ift VADR > $BFFF
	ert 'Invalid memory address range ',VADR
	eli (VLEN>0) && (VLEN<=256)
	ldx #256-VLEN
	lda #$00
	sta:rne VADR+VLEN-256,x+
	eli VLEN>256
	@fill #VADR #VLEN #$00
	eif

.ifdef :psptr
	mwa #PROGRAMSTACK :psptr
.fi

	.ifdef MAIN.@DEFINES.ROMOFF
	icl 'atari\romoff.asm'
	.fi

	ldx #$0F					; DOS II+/D ParamStr
	mva:rpl $340,x MAIN.IOCB@COPY,x-

	inx						; X = 0
	stx bp						; BP = 0

	stx skctl					; reset POKEY
	lda #3
	sta skctl

	dex						; X = 255

	UNITINITIALIZATION

.local	MAIN						; PROCEDURE

	jmp l_0007

; ------------------------------------------------------------

.local	SYSTEM						; UNIT

; ------------------------------------------------------------

__PORTB_BANKS	= $0101
M_PI_2	= $0648
D_PI_2	= $0192
D_PI_180	= $04
MGTIA	= $00
MVBXE	= $80
VBXE_XDLADR	= $00
VBXE_BCBADR	= $0100
VBXE_MAPADR	= $1000
VBXE_CHBASE	= $1000
VBXE_OVRADR	= $5000
VBXE_WINDOW	= $B000
IDLI	= $00
IVBL	= $01
ITIM1	= $02
ITIM2	= $03
ITIM4	= $04
CH_DELCHR	= $FE
CH_ENTER	= $9B
CH_ESC	= $1B
CH_CURS_UP	= $1C
CH_CURS_DOWN	= $1D
CH_CURS_LEFT	= $1E
CH_CURS_RIGHT	= $1F
CH_TAB	= $7F
CH_EOL	= $9B
CH_CLR	= $7D
CH_BELL	= $FD
CH_DEL	= $7E
CH_DELLINE	= $9C
CH_INSLINE	= $9D
COLOR_BLACK	= $00
COLOR_WHITE	= $0E
COLOR_RED	= $32
COLOR_CYAN	= $96
COLOR_VIOLET	= $68
COLOR_GREEN	= $C4
COLOR_BLUE	= $74
COLOR_YELLOW	= $EE
COLOR_ORANGE	= $28
COLOR_BROWN	= $E4
COLOR_LIGHTRED	= $3C
COLOR_GRAY1	= $04
COLOR_GRAY2	= $06
COLOR_GRAY3	= $0A
COLOR_LIGHTGREEN	= $CC
COLOR_LIGHTBLUE	= $7C
FMOPENREAD	= $04
FMOPENWRITE	= $08
FMOPENAPPEND	= $09
FMOPENREADWRITE	= $0C
SCREENWIDTH	= DATAORIGIN+$0000
SCREENHEIGHT	= DATAORIGIN+$0002
DATESEPARATOR	= DATAORIGIN+$0004
RND	= $D20A
adr.PALETTE	= $02C0
.var PALETTE	= adr.PALETTE .word
adr.HPALETTE	= $D012
.var HPALETTE	= adr.HPALETTE .word
FILEMODE	= DATAORIGIN+$0005
GRAPHMODE	= DATAORIGIN+$0006
IORESULT	= DATAORIGIN+$0007
EOLN	= DATAORIGIN+$0008
RNDSEED	= DATAORIGIN+$0009

.endl							; UNIT SYSTEM

; ------------------------------------------------------------

.local	SFX_API						; UNIT

.local	INIT_SFXENGINE					; PROCEDURE | ASSEMBLER

; ---------------------  ASM Block 052  ---------------------

sfx_engine_start

 .print "SFX-ENGINE START: ", *

  icl 'sfx_engine/sfx_engine.asm'

 .print "SFX-ENGINE SIZE: ", *-sfx_engine_start

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SFX_TICK_VBL					; PROCEDURE | ASSEMBLER | INTERRUPT

; ---------------------  ASM Block 053  ---------------------

xitvbl      = $e462
sysvbv      = $e45c
portb       = $d301

      phr

.ifdef MAIN.@DEFINES.SFX_SWITCH_ROM
.ifdef MAIN.@DEFINES.ROMOFF
      lda portb
      pha
      lda #$FE
      sta portb
.endif
.endif

      jsr INIT_SFXEngine.SFX_MAIN_TICK

.ifdef MAIN.@DEFINES.SFX_SWITCH_ROM
.ifdef MAIN.@DEFINES.ROMOFF
      pla
      sta portb
.endif
.endif

      plr
      jmp xitvbl
;      rts

	rti						; ret
.endl

.local	SFX_TICK_DLI					; PROCEDURE | ASSEMBLER | INTERRUPT

; ---------------------  ASM Block 054  ---------------------

portb       = $d301

      phr

.ifdef MAIN.@DEFINES.SFX_SWITCH_ROM
.ifdef MAIN.@DEFINES.ROMOFF
      lda portb
      pha
      lda #$FE
      sta portb
.endif
.endif

      jsr INIT_SFXEngine.SFX_MAIN_TICK

.ifdef MAIN.@DEFINES.SFX_SWITCH_ROM
.ifdef MAIN.@DEFINES.ROMOFF
      pla
      sta portb
.endif
.endif

      plr
      rti

	rti						; ret
.endl

.local	SFX_STARTVBL					; PROCEDURE

; optimize FAIL ('INIT_SFXENGINE', SFX_API), line = 131

	jsr INIT_SFXENGINE

; optimize OK (SFX_API), line = 132

	lda #$00
	sta NMIEN

; optimize OK (SFX_API), line = 133

	lda #$01
	sta INTMODE

	lda VVBLKD
	sta OLDINTVEC
	lda VVBLKD+1
	sta OLDINTVEC+1

; optimize OK (SFX_API), line = 135

	lda <SFX_TICK_VBL
	ldy #5
	sta wsync
	dey
	rne
	sta VVBLKD
	lda >SFX_TICK_VBL
	sta VVBLKD+1

; optimize OK (SFX_API), line = 136

	lda #$40
	sta NMIEN
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SFX_OFF						; PROCEDURE | ASSEMBLER

; ---------------------  ASM Block 056  ---------------------

			jsr INIT_SFXEngine.SFX_OFF_ALL

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SFX_PLAYSONG					; PROCEDURE | ASSEMBLER
	sta STARTPOS

; ---------------------  ASM Block 060  ---------------------

			tay
			jsr INIT_SFXEngine.SFX_PLAY_SONG


; ------------------------------------------------------------

STARTPOS	= DATAORIGIN+$000E

@VarData	= STARTPOS
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SFX_END						; PROCEDURE

; optimize FAIL ('SFX_OFF', SFX_API), line = 216

	jsr SFX_OFF

; optimize OK (SFX_API), line = 217

	lda OLDINTVEC+1
	ora OLDINTVEC
	jeq l_0097

; optimize OK (SFX_API), line = 219

	lda #$00
	sta NMIEN

; optimize OK (SFX_API), line = 220

	lda INTMODE
	sta @CASETMP_0003
	cmp #$00
	jne l_00A7
@

; optimize OK (SFX_API), line = 221

	mva OLDINTVEC VDSLST
	mva OLDINTVEC+1 VDSLST+1

	jmp a_0003
l_00A7
	cmp #$01
	jne l_00B2
@

; optimize OK (SFX_API), line = 222

	lda OLDINTVEC
	ldy #5
	sta wsync
	dey
	rne
	sta VVBLKD
	lda OLDINTVEC+1
	sta VVBLKD+1

l_00B2
a_0003

; optimize OK (SFX_API), line = 224

	lda #$40
	sta NMIEN

; optimize OK (SFX_API), line = 225

	lda #$00
	sta OLDINTVEC
	sta OLDINTVEC+1
l_0097

; ------------------------------------------------------------

@CASETMP_0003	= DATAORIGIN+$000F

@VarData	= @CASETMP_0003
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------

SFX_REGISTERS	= $F0
SFX_CHANNELS_ADDR	= $06C0
SFX_ORG	= $7000
NOTE_TABLE_ADDR	= $7000
NOTE_TABLE_PAGE	= $70
SONG_ADDR	= $7100
SFX_MODE_SET_ADDR	= $7200
SFX_NOTE_SET_ADDR	= $7213
SFX_TABLE_ADDR	= $7226
TAB_TABLE_ADDR	= $724C
SFX_DATA_ADDR	= $728A
_SFXPTR	= $00
_SFXPTRLO	= $00
_SFXPTRHI	= $01
_SFXNOTETABOFS	= $02
_CHNOFS	= $03
_CHNNOTE	= $04
_CHNFREQ	= $05
_CHNMODE	= $06
_CHNMODVAL	= $07
_CHNCTRL	= $08
_TRACKOFS	= $0A
_TABPTR	= $0C
_TABPTRLO	= $0C
_TABPTRHI	= $0D
_TABOFS	= $0E
_TABREP	= $0F
adr.SONGDATA	= $7100
.var SONGDATA	= adr.SONGDATA .word
adr.SFXMODMODE	= $7200
.var SFXMODMODE	= adr.SFXMODMODE .word
adr.SFXNOTESETOFS	= $7213
.var SFXNOTESETOFS	= adr.SFXNOTESETOFS .word
adr.SFXPTR	= $7226
.var SFXPTR	= adr.SFXPTR .word
adr.TABPTR	= $724C
.var TABPTR	= adr.TABPTR .word
SONG_TEMPO	= $F0
SONG_TICK	= $F1
SONG_OFS	= $F2
SONG_REPCOUNT	= $F3
adr.CHANNELS	= $06C0
.var CHANNELS	= adr.CHANNELS .word
NMIEN	= $D40E
OLDINTVEC	= DATAORIGIN+$000B
INTMODE	= DATAORIGIN+$000D

.endl							; UNIT SFX_API

; ------------------------------------------------------------

.local	ATARI						; UNIT

; ------------------------------------------------------------

IRQENS	= $10
RTCLOK	= $12
RTCLOK1	= $12
RTCLOK2	= $13
RTCLOK3	= $14
ATRACT	= $4D
LMARGIN	= $52
RMARGIN	= $53
ROWCRS	= $54
COLCRS	= $55
DINDEX	= $57
SAVMSC	= $58
PALNTS	= $62
RAMTOP	= $6A
VDSLST	= $0200
SDLSTL	= $0230
TXTROW	= $0290
TXTCOL	= $0291
TINDEX	= $0293
TXTMSC	= $0294
SDMCTL	= $022F
GPRIOR	= $026F
CRSINH	= $02F0
CHACT	= $02F3
CHBAS	= $02F4
CH	= $02FC
PCOLR0	= $02C0
PCOLR1	= $02C1
PCOLR2	= $02C2
PCOLR3	= $02C3
COLOR0	= $02C4
COLOR1	= $02C5
COLOR2	= $02C6
COLOR3	= $02C7
COLOR4	= $02C8
COLBAKS	= $02C8
HPOSP0	= $D000
HPOSP1	= $D001
HPOSP2	= $D002
HPOSP3	= $D003
HPOSM0	= $D004
HPOSM1	= $D005
HPOSM2	= $D006
HPOSM3	= $D007
SIZEP0	= $D008
SIZEP1	= $D009
SIZEP2	= $D00A
SIZEP3	= $D00B
SIZEM	= $D00C
GRAFP0	= $D00D
GRAFP1	= $D00E
GRAFP2	= $D00F
GRAFP3	= $D010
GRAFM	= $D011
P0PF	= $D004
PAL	= $D014
COLPM0	= $D012
COLPM1	= $D013
COLPM2	= $D014
COLPM3	= $D015
COLPF0	= $D016
COLPF1	= $D017
COLPF2	= $D018
COLPF3	= $D019
COLBK	= $D01A
PRIOR	= $D01B
GRACTL	= $D01D
HITCLR	= $D01E
CONSOL	= $D01F
AUDF1	= $D200
AUDC1	= $D201
AUDF2	= $D202
AUDC2	= $D203
AUDF3	= $D204
AUDC3	= $D205
AUDF4	= $D206
AUDC4	= $D207
AUDCTL	= $D208
KBCODE	= $D209
IRQEN	= $D20E
SKSTAT	= $D20F
PORTA	= $D300
PORTB	= $D301
DMACTL	= $D400
CHACTL	= $D401
DLISTL	= $D402
HSCROL	= $D404
VSCROL	= $D405
PMBASE	= $D407
CHBASE	= $D409
WSYNC	= $D40A
VCOUNT	= $D40B
PENH	= $D40C
PENV	= $D40D
NMIEN	= $D40E
NMIVEC	= $FFFA
RESETVEC	= $FFFC
IRQVEC	= $FFFE

.endl							; UNIT ATARI
l_0007

; optimize FAIL ('SFX_API.SFX_STARTVBL', main.pas), line = 11

	jsr SFX_API.SFX_STARTVBL

; optimize OK (main.pas), line = 12

	lda #$00
	jsr SFX_API.SFX_PLAYSONG

; --- RepeatUntilProlog
l_00C9

; optimize OK (main.pas), line = 13

	lda ATARI.CH
	cmp #$FF
	jeq l_00C9
	lda #$FF
	sta ATARI.CH

; optimize FAIL ('SFX_API.SFX_END', main.pas), line = 14

	jsr SFX_API.SFX_END
@exit

@halt	ldx #$00
	txs
	.ifdef MAIN.@DEFINES.ROMOFF
	inc portb
	.fi

	ldy #$01

	rts

; ------------------------------------------------------------

IOCB@COPY	:16 brk

; ------------------------------------------------------------

.local	@DEFINES
ATARI
USE_MODULATORS
LFD_NLM_MOD
HFD_MOD
SFX_PLAYBACK
.endl

.local	@RESOURCE
.endl

.endl							; MAIN

; ------------------------------------------------------------
; ------------------------------------------------------------

.macro	UNITINITIALIZATION

	.ifdef MAIN.SYSTEM.@UnitInit
	jsr MAIN.SYSTEM.@UnitInit
	.fi

	.ifdef MAIN.SFX_API.@UnitInit
	jsr MAIN.SFX_API.@UnitInit
	.fi

	.ifdef MAIN.ATARI.@UnitInit
	jsr MAIN.ATARI.@UnitInit
	.fi
.endm

; ------------------------------------------------------------

	ift .SIZEOF(MAIN.SYSTEM) > 0
	.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
	eif

	ift .SIZEOF(MAIN.SFX_API) > 0
	.print 'SFX_API: ',MAIN.SFX_API,'..',MAIN.SFX_API+.SIZEOF(MAIN.SFX_API)-1
	eif

	ift .SIZEOF(MAIN.ATARI) > 0
	.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
	eif

	.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1

; ------------------------------------------------------------

	.align $0004

DATAORIGIN
.by  $28 $00 $18 $00 $2D $0C

VARINITSIZE	= *-DATAORIGIN
VARDATASIZE	= 16

PROGRAMSTACK	= DATAORIGIN+VARDATASIZE

	.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK

	run START

; ------------------------------------------------------------

.macro	STATICDATA
.endm

	end
